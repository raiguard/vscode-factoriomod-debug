local invert = require("__debugadapter__/enumutil.lua").invert
local __DebugAdapter = __DebugAdapter
local pcall = pcall
local luaObjectLines = {
  ---@param stack LuaItemStack
  ---@param short boolean | nil
  LuaItemStack = function(stack,short)
    if stack.valid_for_read then
      if not short then
        return __DebugAdapter.stringInterp([[<LuaItemStack>{[}name={name}, count={count}{]}]],nil,stack)
      else
        return [[<LuaItemStack>]]
      end
    else
      return [[<Empty LuaItemStack>]]
    end
  end,
  LuaPlayer = [[<LuaPlayer>{[}name={name}, index={index}{]}]],
  LuaSurface = [[<LuaSurface>{[}name={name}, index={index}{]}]],
  LuaForce = [[<LuaForce>{[}name={name}, index={index}{]}]],
  LuaGuiElement = [[<LuaGuiElement>{[}name={name}, type={type}, index={index}{]}]],
  LuaStyle = [[<LuaStyle>{[}name={name}{]}]],
  LuaEntity = [[<LuaEntity>{[}name={name}, type={type}, unit_number={unit_number}{]}]],
}
__DebugAdapter.stepIgnoreAll(luaObjectLines)

-- some API functions can raise events, so we want to record the stack somewhere
-- and indicate that it needs to be requested if something stops in the lower stack
-- API functions (including metas) have two upval:
-- userdata(pointer to object), userdata(pointer to member function)
-- all functions from one object will have the same value in the first
-- all instances of the same class::function will have the same value in the second
local eventlike = {
  members = {
    -- userdata => {class="",member=""}
  },
  classes = {
    __index = {
      LuaGameScript = {
        create_surface = true,
        remove_offline_players = true,
        create_force = true,
        merge_forces = true,
      },
      LuaItemStack = {
        build_blueprint = true,
        set_stack = true,
      },
      LuaSurface = {
        create_entity = true,
        set_tiles = true,
        clone_area = true,
        clone_entities = true,
        close_brush = true,
        teleport = true,
      },
      LuaEntity = {
        destroy = true,
        die = true,
        revive = true,
        silent_revive = true,
        clone = true,
        mine = true,
        connect_rolling_stock = true,
        disconnect_rolling_stock = true,
        set_driver = true,
        set_passenger = true, --TODO: verify
      },
      LuaPlayer = {
        toggle_map_editor = true,
        mine_entity = true,
        mine_tile = true,
      },
      LuaForce = {
        set_friend = true,
        set_cease_fire = true,
        reset = true,
      },
      LuaEquipmentGrid = {
        put = true,
        take = true,
        clear = true,
      },
      LuaInventory = {
        resize = true,
      },
      LuaCustomChartTag = {
        destroy = true,
      }
    },
    __newindex = {
      LuaEntity = {
        driving = true,
      },
      LuaPlayer = {
        opened = true,
        driving = true,
      },
      LuaCustomChartTag = {
        text = true, --TODO: verify
      },
      LuaSurface = {
        name = true,
      },
      LuaTrain = {
        schedule = true,
        manual_mode = true,
      },
      --just catch any write to a LuaCustomTable, to cover mod settings
      --all LuaCustomTable::__newindex use the same pointer-to-member userdata
      --so we can't differentiate them from here.
      LuaCustomTable = setmetatable({},{__index = function() return true end}),
    }
  }
}

local function check_eventlike(level,hooktype)
  local info = debug.getinfo(level,"nSf")
  if not info then return end
  if info.what ~= "C" then return end
  local fname = info.name
  local classes = eventlike.classes[fname]
  if classes then
    local _,t = debug.getlocal(level,1)
    if type(t) ~= "table" or getmetatable(t) ~= "private" then return end
    local tname = t.object_name
    if not tname then return end
    local class = classes[tname]
    if not class then return end
    local _,k = debug.getlocal(level,2)
    local member = class[k]
    if member then
      if fname == "__index" then
        if hooktype == "call" or hooktype == "tail call" then
          -- there's no good way to get return values, so fetch it myself once in call instead
          -- and get the userdata so we can compare things...
          -- pcall in case it's a bad lookup
          local success,func = pcall(function () return t[k] end)
          if success and type(func)=="function" then
            local _,memberptr = debug.getupvalue(func,2)
            eventlike.members[memberptr] = {class=tname,member=k}
            -- only need to do this once, so unhook it once we get one!
            class[k] = nil
            if not next(class) then
              classes[tname] = nil
            end
          end
        end
        -- this call is not eventlike itself, but the returned func will be
        return --false,tname,k
      else -- __newindex
        -- do the thing
        return true,tname,k,(select(2,debug.getlocal(level,3)))
      end
    end
  else
    local f = info.func
    local _,memberptr = debug.getupvalue(f,2)
    if memberptr then
      local member = eventlike.members[memberptr]
      if member then
        -- do the thing
        return true,member.class,member.member
      end
    end
  end
end
__DebugAdapter.stepIgnore(check_eventlike)



-- class data last updated factorio 1.1.6
return {
  alwaysValid = {
    LuaRemote = true,
    LuaCommandProcessor = true,
    LuaSettings = true,
    LuaRCON = true,
    LuaRendering = true,
    LuaBootstrap = true,
    LuaGameScript = true,
    LuaMapSettings = true,
    LuaDifficultySettings = true,
    LuaGameViewSettings = true,
  },
  noLongRefs = {
    LuaCustomTable = true,
    LuaLazyLoadedValue = true,
    LuaMapSettings = true,
    LuaGameViewSettings = true,
    LuaDifficultySettings = true,
  },
  lineItem = luaObjectLines,
  eventlike = eventlike,
  check_eventlike = check_eventlike,
  expandKeys = {
    LuaAISettings = {
      allow_destroy_when_commands_fail = {},
      allow_try_return_to_spawner = {},
      do_separation = {},
      path_resolution_modifier = {},
    },
    LuaAccumulatorControlBehavior = {
      type = {readOnly = true, enum = invert(defines.control_behavior.type,"defines.control_behavior.type.")},
      entity = {readOnly = true},
      output_signal = {},
    },
    LuaAchievementPrototype = {
      name = {readOnly = true},
      order = {readOnly = true},
      localised_name = {readOnly = true},
      localised_description = {readOnly = true},
      allowed_without_fight = {readOnly = true},
      hidden = {readOnly = true},
    },
    LuaAmmoCategoryPrototype = {
      name = {readOnly = true},
      order = {readOnly = true},
      localised_name = {readOnly = true},
      localised_description = {readOnly = true},
      bonus_gui_order = {readOnly = true},
    },
    LuaArithmeticCombinatorControlBehavior = {
      type = {readOnly = true, enum = invert(defines.control_behavior.type,"defines.control_behavior.type.")},
      entity = {readOnly = true},
      signals_last_tick = {readOnly = true},
      parameters = {readOnly = true},
    },
    LuaAutoplaceControlPrototype = {
      name = {readOnly = true},
      order = {readOnly = true},
      localised_name = {readOnly = true},
      localised_description = {readOnly = true},
      richness = {readOnly = true},
      control_order = {readOnly = true},
      category = {readOnly = true},
    },
    LuaBootstrap = {
      mod_name = {readOnly = true},
      active_mods = {readOnly = true},
      is_game_in_debug_mode = {readOnly = true},
    },
    LuaBurner = {
      owner = {readOnly = true},
      inventory = {readOnly = true},
      burnt_result_inventory = {readOnly = true},
      heat = {},
      heat_capacity = {readOnly = true},
      remaining_burning_fuel = {},
      currently_burning = {},
      fuel_categories = {readOnly = true},
    },
    LuaBurnerPrototype = {
      emissions = {readOnly = true},
      render_no_network_icon = {readOnly = true},
      render_no_power_icon = {readOnly = true},
      effectivity = {readOnly = true},
      fuel_inventory_size = {readOnly = true},
      burnt_inventory_size = {readOnly = true},
      smoke = {readOnly = true},
      light_flicker = {readOnly = true},
      fuel_categories = {readOnly = true},
    },
    LuaCircuitNetwork = {
      entity = {readOnly = true},
      wire_type = {readOnly = true, enum = invert(defines.wire_type,"defines.wire_type.")},
      circuit_connector_id = {readOnly = true, enum = (function()
        local combinator = invert(defines.circuit_connector_id,"defines.circuit_connector_id.",function(k,v) return (not not string.match(k,"^combinator")) end)
        local netnames = {
          ["accumulator"] = {[defines.circuit_connector_id.accumulator] = "defines.circuit_connector_id.accumulator"},
          ["container"] = {[defines.circuit_connector_id.container] = "defines.circuit_connector_id.container"},
          ["logistic-container"] = {[defines.circuit_connector_id.container] = "defines.circuit_connector_id.container"},
          ["programmable-speaker"] = {[defines.circuit_connector_id.programmable_speaker] = "defines.circuit_connector_id.programmable_speaker"},
          ["rail-signal"] = {[defines.circuit_connector_id.rail_signal] = "defines.circuit_connector_id.rail_signal"},
          ["rail-chain-signal"] = {[defines.circuit_connector_id.rail_chain_signal] = "defines.circuit_connector_id.rail_chain_signal"},
          ["roboport"] = {[defines.circuit_connector_id.roboport] = "defines.circuit_connector_id.roboport"},
          ["storage-tank"] = {[defines.circuit_connector_id.storage_tank] = "defines.circuit_connector_id.storage_tank"},
          ["wall"] = {[defines.circuit_connector_id.wall] = "defines.circuit_connector_id.wall"},
          ["electric-pole"] = {[defines.circuit_connector_id.electric_pole] = "defines.circuit_connector_id.electric_pole"},
          ["inserter"] = {[defines.circuit_connector_id.inserter] = "defines.circuit_connector_id.inserter"},
          ["lamp"] = {[defines.circuit_connector_id.lamp] = "defines.circuit_connector_id.lamp"},
          ["pump"] = {[defines.circuit_connector_id.pump] = "defines.circuit_connector_id.pump"},
          ["ofshore-pump"] = {[defines.circuit_connector_id.offshore_pump] = "defines.circuit_connector_id.ofshore_pump"},

          ["constant-combinator"] = {[defines.circuit_connector_id.constant_combinator] = "defines.circuit_connector_id.constant_combinator"},

          ["decider-combinator"] = combinator,
          ["arithmetic-combinator"] = combinator,
        }
        return function(network,id)
          local names = netnames[network.entity.type]
          if names then
            return names[id]
          end
        end
      end)()},
      signals = {readOnly = true},
      network_id = {readOnly = true},
      connected_circuit_count = {readOnly = true},
    },
    LuaCommandProcessor = {
      commands = {readOnly = true},
      game_commands = {readOnly = true},
    },
    LuaConstantCombinatorControlBehavior = {
      type = {readOnly = true, enum = invert(defines.control_behavior.type,"defines.control_behavior.type.")},
      entity = {readOnly = true},
      parameters = {readOnly = true},
      enabled = {},
      signals_count = {readOnly = true},
    },
    LuaContainerControlBehavior = {
      type = {readOnly = true, enum = invert(defines.control_behavior.type,"defines.control_behavior.type.")},
      entity = {readOnly = true},
    },
    LuaCustomChartTag = {
      icon = {},
      last_user = {},
      position = {readOnly = true},
      text = {},
      tag_number = {readOnly = true},
      force = {readOnly = true},
      surface = {readOnly = true},
    },
    LuaCustomInputPrototype = {
      name = {readOnly = true},
      order = {readOnly = true},
      localised_name = {readOnly = true},
      localised_description = {readOnly = true},
      key_sequence = {readOnly = true},
      alternative_key_sequence = {readOnly = true},
      linked_game_control = {readOnly = true},
      consuming = {readOnly = true},
      enabled = {readOnly = true},
    },
    LuaDamagePrototype = {
      name = {readOnly = true},
      order = {readOnly = true},
      localised_name = {readOnly = true},
      localised_description = {readOnly = true},
      hidden = {readOnly = true},
    },
    LuaDeciderCombinatorControlBehavior = {
      type = {readOnly = true, enum = invert(defines.control_behavior.type,"defines.control_behavior.type.")},
      entity = {readOnly = true},
      signals_last_tick = {readOnly = true},
      parameters = {readOnly = true},
    },
    LuaDecorativePrototype = {
      name = {readOnly = true},
      order = {readOnly = true},
      localised_name = {readOnly = true},
      localised_description = {readOnly = true},
      collision_box = {readOnly = true},
      collision_mask = {readOnly = true},
      collision_mask_with_flags = {readOnly = true},
      autoplace_specification = {readOnly = true},
    },
    LuaDifficultySettings = {
      recipe_difficulty = {},
      technology_difficulty = {},
      technology_price_multiplier = {},
      research_queue_setting = {},
    },
    LuaElectricEnergySourcePrototype = {
      buffer_capacity = {readOnly = true},
      usage_priority = {readOnly = true},
      input_flow_limit = {readOnly = true},
      output_flow_limit = {readOnly = true},
      drain = {readOnly = true},
      emissions = {readOnly = true},
      render_no_network_icon = {readOnly = true},
      render_no_power_icon = {readOnly = true},
    },
    LuaEntity = {
      surface = {readOnly = true},
      position = {readOnly = true},
      vehicle = {readOnly = true},
      force = {},
      selected = {},
      opened = {},
      crafting_queue_size = {readOnly = true},
      crafting_queue_progress = {readOnly = true},
      walking_state = {},
      riding_state = {},
      mining_state = {},
      shooting_state = {},
      picking_state = {},
      repair_state = {},
      cursor_stack = {readOnly = true},
      cursor_ghost = {},
      driving = {},
      crafting_queue = {readOnly = true},
      following_robots = {readOnly = true},
      cheat_mode = {},
      character_crafting_speed_modifier = {},
      character_mining_speed_modifier = {},
      character_additional_mining_categories = {},
      character_running_speed_modifier = {},
      character_build_distance_bonus = {},
      character_item_drop_distance_bonus = {},
      character_reach_distance_bonus = {},
      character_resource_reach_distance_bonus = {},
      character_item_pickup_distance_bonus = {},
      character_loot_pickup_distance_bonus = {},
      character_inventory_slots_bonus = {},
      character_trash_slot_count_bonus = {},
      character_maximum_following_robot_count_bonus = {},
      character_health_bonus = {},
      character_personal_logistic_requests_enabled = {},
      vehicle_logistic_requests_enabled = {},
      opened_gui_type = {readOnly = true, enum = invert(defines.gui_type,"defines.gui_type.")},
      build_distance = {readOnly = true},
      drop_item_distance = {readOnly = true},
      reach_distance = {readOnly = true},
      item_pickup_distance = {readOnly = true},
      loot_pickup_distance = {readOnly = true},
      resource_reach_distance = {readOnly = true},
      in_combat = {readOnly = true},
      character_running_speed = {readOnly = true},
      character_mining_progress = {readOnly = true},

      name = {readOnly = true},
      ghost_name = {readOnly = true},
      localised_name = {readOnly = true},
      localised_description = {readOnly = true},
      ghost_localised_name = {readOnly = true},
      ghost_localised_description = {readOnly = true},
      type = {readOnly = true},
      ghost_type = {readOnly = true},
      active = {},
      destructible = {},
      minable = {},
      rotatable = {},
      operable = {},
      health = {},
      direction = {enum = invert(defines.direction,"defines.direction.")},
      supports_direction = {readOnly = true},
      orientation = {},
      cliff_orientation = {readOnly = true},
      amount = {},
      initial_amount = {},
      effectivity_modifier = {},
      consumption_modifier = {},
      friction_modifier = {},
      driver_is_gunner = {},
      vehicle_automatic_targeting_parameters = {},
      speed = {},
      effective_speed = {readOnly = true},
      stack = {readOnly = true},
      prototype = {readOnly = true},
      ghost_prototype = {readOnly = true},
      drop_position = {},
      pickup_position = {},
      drop_target = {},
      pickup_target = {},
      selected_gun_index = {},
      energy = {},
      temperature = {},
      previous_recipe = {readOnly = true},
      held_stack = {readOnly = true},
      held_stack_position = {readOnly = true},
      train = {readOnly = true},
      neighbours = {readOnly = true},
      belt_neighbours = {readOnly = true},
      fluidbox = {},
      backer_name = {},
      time_to_live = {},
      color = {},
      text = {},
      signal_state = {readOnly = true, enum = invert(defines.signal_state,"defines.signal_state.")},
      chain_signal_state = {readOnly = true, enum = invert(defines.chain_signal_state,"defines.chain_signal_state.")},
      to_be_looted = {},
      crafting_speed = {readOnly = true},
      crafting_progress = {},
      bonus_progress = {},
      productivity_bonus = {readOnly = true},
      pollution_bonus = {readOnly = true},
      speed_bonus = {readOnly = true},
      consumption_bonus = {readOnly = true},
      belt_to_ground_type = {readOnly = true},
      loader_type = {},
      rocket_parts = {},
      logistic_network = {},
      logistic_cell = {readOnly = true},
      item_requests = {},
      player = {readOnly = true},
      unit_group = {readOnly = true},
      damage_dealt = {},
      kills = {},
      last_user = {},
      electric_buffer_size = {},
      electric_input_flow_limit = {readOnly = true},
      electric_output_flow_limit = {readOnly = true},
      electric_drain = {readOnly = true},
      electric_emissions = {readOnly = true},
      unit_number = {readOnly = true},
      ghost_unit_number = {readOnly = true},
      mining_progress = {},
      bonus_mining_progress = {},
      power_production = {},
      power_usage = {},
      bounding_box = {readOnly = true},
      secondary_bounding_box = {readOnly = true},
      selection_box = {readOnly = true},
      secondary_selection_box = {readOnly = true},
      mining_target = {readOnly = true},
      circuit_connected_entities = {readOnly = true},
      circuit_connection_definitions = {readOnly = true},
      request_slot_count = {readOnly = true},
      filter_slot_count = {readOnly = true},
      loader_container = {readOnly = true},
      grid = {readOnly = true},
      graphics_variation = {},
      tree_color_index = {},
      tree_color_index_max = {readOnly = true},
      tree_stage_index = {},
      tree_stage_index_max = {readOnly = true},
      tree_gray_stage_index = {},
      tree_gray_stage_index_max = {readOnly = true},
      burner = {readOnly = true},
      shooting_target = {},
      proxy_target = {readOnly = true},
      stickers = {readOnly = true},
      sticked_to = {readOnly = true},
      parameters = {},
      alert_parameters = {},
      electric_network_statistics = {readOnly = true},
      inserter_stack_size_override = {},
      products_finished = {},
      spawner = {readOnly = true},
      units = {readOnly = true},
      power_switch_state = {},
      relative_turret_orientation = {},
      effects = {readOnly = true},
      infinity_container_filters = {},
      remove_unfiltered_items = {},
      character_corpse_player_index = {},
      character_corpse_tick_of_death = {},
      character_corpse_death_cause = {},
      associated_player = {},
      tick_of_last_attack = {},
      tick_of_last_damage = {},
      splitter_filter = {},
      inserter_filter_mode = {},
      splitter_input_priority = {},
      splitter_output_priority = {},
      armed = {readOnly = true},
      recipe_locked = {},
      connected_rail = {readOnly = true},
      trains_in_block = {readOnly = true},
      timeout = {},
      neighbour_bonus = {readOnly = true},
      ai_settings = {readOnly = true},
      highlight_box_type = {},
      highlight_box_blink_interval = {},
      status = {readOnly = true, enum = invert(defines.entity_status,"defines.entity_status.")},
      enable_logistics_while_moving = {},
      render_player = {},
      render_to_forces = {},
      pump_rail_target = {readOnly = true},
      moving = {readOnly = true},
      electric_network_id = {readOnly = true},
      allow_dispatching_robots = {},
      auto_launch = {},
      energy_generated_last_tick = {readOnly = true},
      storage_filter = {},
      request_from_buffers = {},
      corpse_expires = {},
      corpse_immune_to_entity_placement = {},
      tags = {},
      command = {readOnly = true},
      distraction_command = {readOnly = true},
      time_to_next_effect = {},
      autopilot_destination = {},
      autopilot_destinations = {readOnly = true},
      trains_count = {readOnly = true},
      trains_limit = {},
      is_entity_with_force = {readOnly = true},
      is_entity_with_owner = {readOnly = true},
      is_entity_with_health = {readOnly = true},
      combat_robot_owner = {},
      link_id = {},
      follow_target = {},
      follow_offset = {},
      linked_belt_type = {},
      linked_belt_neighbour = {readOnly = true},
    },
    LuaEntityPrototype = {
      name = {readOnly = true},
      type = {readOnly = true},
      localised_name = {readOnly = true},
      localised_description = {readOnly = true},
      max_health = {readOnly = true},
      infinite_resource = {readOnly = true},
      minimum_resource_amount = {readOnly = true},
      normal_resource_amount = {readOnly = true},
      infinite_depletion_resource_amount = {readOnly = true},
      resource_category = {readOnly = true},
      mineable_properties = {readOnly = true},
      items_to_place_this = {readOnly = true},
      collision_box = {readOnly = true},
      secondary_collision_box = {readOnly = true},
      map_generator_bounding_box = {readOnly = true},
      selection_box = {readOnly = true},
      drawing_box = {readOnly = true},
      sticker_box = {readOnly = true},
      collision_mask = {readOnly = true},
      collision_mask_with_flags = {readOnly = true},
      default_collision_mask_with_flags = {readOnly = true},
      order = {readOnly = true},
      group = {readOnly = true},
      subgroup = {readOnly = true},
      healing_per_tick = {readOnly = true},
      emissions_per_second = {readOnly = true},
      corpses = {readOnly = true},
      selectable_in_game = {readOnly = true},
      selection_priority = {readOnly = true},
      weight = {readOnly = true},
      resistances = {readOnly = true},
      fast_replaceable_group = {readOnly = true},
      next_upgrade = {readOnly = true},
      loot = {readOnly = true},
      repair_speed_modifier = {readOnly = true},
      turret_range = {readOnly = true},
      autoplace_specification = {readOnly = true},
      belt_speed = {readOnly = true},
      result_units = {readOnly = true},
      attack_result = {readOnly = true},
      final_attack_result = {readOnly = true},
      attack_parameters = {readOnly = true},
      spawn_cooldown = {readOnly = true},
      mining_drill_radius = {readOnly = true},
      mining_speed = {readOnly = true},
      logistic_mode = {readOnly = true},
      max_underground_distance = {readOnly = true},
      flags = {readOnly = true},
      remains_when_mined = {readOnly = true},
      additional_pastable_entities = {readOnly = true},
      allow_copy_paste = {readOnly = true},
      shooting_cursor_size = {readOnly = true},
      created_smoke = {readOnly = true},
      created_effect = {readOnly = true},
      map_color = {readOnly = true},
      friendly_map_color = {readOnly = true},
      enemy_map_color = {readOnly = true},
      build_base_evolution_requirement = {readOnly = true},
      instruments = {readOnly = true},
      max_polyphony = {readOnly = true},
      module_inventory_size = {readOnly = true},
      ingredient_count = {readOnly = true},
      crafting_speed = {readOnly = true},
      crafting_categories = {readOnly = true},
      resource_categories = {readOnly = true},
      supply_area_distance = {readOnly = true},
      max_wire_distance = {readOnly = true},
      max_circuit_wire_distance = {readOnly = true},
      energy_usage = {readOnly = true},
      max_energy_usage = {readOnly = true},
      max_energy_production = {readOnly = true},
      effectivity = {readOnly = true},
      consumption = {readOnly = true},
      friction_force = {readOnly = true},
      braking_force = {readOnly = true},
      tank_driving = {readOnly = true},
      rotation_speed = {readOnly = true},
      turret_rotation_speed = {readOnly = true},
      guns = {readOnly = true},
      speed = {readOnly = true},
      speed_multiplier_when_out_of_energy = {readOnly = true},
      max_payload_size = {readOnly = true},
      draw_cargo = {readOnly = true},
      energy_per_move = {readOnly = true},
      energy_per_tick = {readOnly = true},
      max_energy = {readOnly = true},
      min_to_charge = {readOnly = true},
      max_to_charge = {readOnly = true},
      burner_prototype = {readOnly = true},
      electric_energy_source_prototype = {readOnly = true},
      heat_energy_source_prototype = {readOnly = true},
      fluid_energy_source_prototype = {readOnly = true},
      void_energy_source_prototype = {readOnly = true},
      building_grid_bit_shift = {readOnly = true},
      fluid_usage_per_tick = {readOnly = true},
      maximum_temperature = {readOnly = true},
      target_temperature = {readOnly = true},
      fluid = {readOnly = true},
      fluid_capacity = {readOnly = true},
      pumping_speed = {readOnly = true},
      stack = {readOnly = true},
      allow_custom_vectors = {readOnly = true},
      allow_burner_leech = {readOnly = true},
      inserter_extension_speed = {readOnly = true},
      inserter_rotation_speed = {readOnly = true},
      count_as_rock_for_filtered_deconstruction = {readOnly = true},
      filter_count = {readOnly = true},
      time_to_live = {readOnly = true},
      distribution_effectivity = {readOnly = true},
      explosion_beam = {readOnly = true},
      explosion_rotate = {readOnly = true},
      tree_color_count = {readOnly = true},
      alert_when_damaged = {readOnly = true},
      alert_when_attacking = {readOnly = true},
      color = {readOnly = true},
      collision_mask_collides_with_self = {readOnly = true},
      collision_mask_collides_with_tiles_only = {readOnly = true},
      collision_mask_considers_tile_transitions = {readOnly = true},
      allowed_effects = {readOnly = true},
      rocket_parts_required = {readOnly = true},
      rocket_rising_delay = {readOnly = true},
      launch_wait_time = {readOnly = true},
      light_blinking_speed = {readOnly = true},
      door_opening_speed = {readOnly = true},
      rising_speed = {readOnly = true},
      engine_starting_speed = {readOnly = true},
      flying_speed = {readOnly = true},
      flying_acceleration = {readOnly = true},
      fixed_recipe = {readOnly = true},
      construction_radius = {readOnly = true},
      logistic_radius = {readOnly = true},
      energy_per_hit_point = {readOnly = true},
      create_ghost_on_death = {readOnly = true},
      timeout = {readOnly = true},
      fluidbox_prototypes = {readOnly = true},
      neighbour_bonus = {readOnly = true},
      neighbour_collision_increase = {readOnly = true},
      container_distance = {readOnly = true},
      belt_distance = {readOnly = true},
      belt_length = {readOnly = true},
      is_building = {readOnly = true},
      automated_ammo_count = {readOnly = true},
      max_speed = {readOnly = true},
      darkness_for_all_lamps_on = {readOnly = true},
      darkness_for_all_lamps_off = {readOnly = true},
      always_on = {readOnly = true},
      min_darkness_to_spawn = {readOnly = true},
      max_darkness_to_spawn = {readOnly = true},
      call_for_help_radius = {readOnly = true},
      max_count_of_owned_units = {readOnly = true},
      max_friends_around_to_spawn = {readOnly = true},
      spawning_radius = {readOnly = true},
      spawning_spacing = {readOnly = true},
      radius = {readOnly = true},
      cliff_explosive_prototype = {readOnly = true},
      rocket_entity_prototype = {readOnly = true},
      has_belt_immunity = {readOnly = true},
      vision_distance = {readOnly = true},
      pollution_to_join_attack = {readOnly = true},
      min_pursue_time = {readOnly = true},
      max_pursue_distance = {readOnly = true},
      radar_range = {readOnly = true},
      move_while_shooting = {readOnly = true},
      can_open_gates = {readOnly = true},
      affected_by_tiles = {readOnly = true},
      distraction_cooldown = {readOnly = true},
      spawning_time_modifier = {readOnly = true},
      alert_icon_shift = {readOnly = true},
      lab_inputs = {readOnly = true},
      researching_speed = {readOnly = true},
      item_slot_count = {readOnly = true},
      base_productivity = {readOnly = true},
      allow_access_to_all_forces = {readOnly = true},
      supports_direction = {readOnly = true},
      terrain_friction_modifier = {readOnly = true},
      allow_passengers = {readOnly = true},
      max_distance_of_sector_revealed = {readOnly = true},
      max_distance_of_nearby_sector_revealed = {readOnly = true},
      adjacent_tile_collision_box = {readOnly = true},
      adjacent_tile_collision_mask = {readOnly = true},
      adjacent_tile_collision_test = {readOnly = true},
      center_collision_mask = {readOnly = true},
      grid_prototype = {readOnly = true},
      remove_decoratives = {readOnly = true},
      running_speed = {readOnly = true},
      maximum_corner_sliding_distance = {readOnly = true},
      build_distance = {readOnly = true},
      drop_item_distance = {readOnly = true},
      reach_distance = {readOnly = true},
      reach_resource_distance = {readOnly = true},
      item_pickup_distance = {readOnly = true},
      loot_pickup_distance = {readOnly = true},
      enter_vehicle_distance = {readOnly = true},
      ticks_to_keep_gun = {readOnly = true},
      ticks_to_keep_aiming_direction = {readOnly = true},
      ticks_to_stay_in_combat = {readOnly = true},
      respawn_time = {readOnly = true},
      damage_hit_tint = {readOnly = true},
      character_corpse = {readOnly = true},
      inserter_pickup_position = {readOnly = true},
      inserter_drop_position = {readOnly = true},
      inserter_chases_belt_items = {readOnly = true},
    },
    LuaEquipment = {
      name = {readOnly = true},
      type = {readOnly = true},
      position = {readOnly = true},
      shape = {readOnly = true},
      shield = {},
      max_shield = {readOnly = true},
      max_solar_power = {readOnly = true},
      movement_bonus = {readOnly = true},
      generator_power = {readOnly = true},
      energy = {},
      max_energy = {readOnly = true},
      prototype = {readOnly = true},
      burner = {readOnly = true},
    },
    LuaEquipmentCategoryPrototype = {
      name = {readOnly = true},
      order = {readOnly = true},
      localised_name = {readOnly = true},
      localised_description = {readOnly = true},
    },
    LuaEquipmentGrid = {
      prototype = {readOnly = true},
      width = {readOnly = true},
      height = {readOnly = true},
      equipment = {readOnly = true},
      generator_energy = {readOnly = true},
      max_solar_energy = {readOnly = true},
      available_in_batteries = {readOnly = true},
      battery_capacity = {readOnly = true},
      shield = {readOnly = true},
      max_shield = {readOnly = true},
      inhibit_movement_bonus = {},
    },
    LuaEquipmentGridPrototype = {
      name = {readOnly = true},
      order = {readOnly = true},
      localised_name = {readOnly = true},
      localised_description = {readOnly = true},
      equipment_categories = {readOnly = true},
      width = {readOnly = true},
      height = {readOnly = true},
      locked = {readOnly = true},
    },
    LuaEquipmentPrototype = {
      name = {readOnly = true},
      type = {readOnly = true},
      order = {readOnly = true},
      localised_name = {readOnly = true},
      localised_description = {readOnly = true},
      shape = {readOnly = true},
      take_result = {readOnly = true},
      energy_production = {readOnly = true},
      shield = {readOnly = true},
      energy_per_shield = {readOnly = true},
      logistic_parameters = {readOnly = true},
      energy_consumption = {readOnly = true},
      movement_bonus = {readOnly = true},
      energy_source = {readOnly = true},
      equipment_categories = {readOnly = true},
      burner_prototype = {readOnly = true},
      electric_energy_source_prototype = {readOnly = true},
      background_color = {readOnly = true},
      attack_parameters = {readOnly = true},
      automatic = {readOnly = true},
    },
    LuaFlowStatistics = {
      input_counts = {readOnly = true},
      output_counts = {readOnly = true},
      force = {readOnly = true},
    },
    LuaFluidBox = {
      owner = {readOnly = true},
      ["[]"] = {readOnly = true, thisAsTable = true, iterMode = "count" }
    },
    LuaFluidBoxPrototype = {
      entity = {readOnly = true},
      index = {readOnly = true},
      pipe_connections = {readOnly = true},
      production_type = {readOnly = true},
      base_area = {readOnly = true},
      base_level = {readOnly = true},
      height = {readOnly = true},
      volume = {readOnly = true},
      filter = {readOnly = true},
      minimum_temperature = {readOnly = true},
      maximum_temperature = {readOnly = true},
      secondary_draw_orders = {readOnly = true},
      render_layer = {readOnly = true},
    },
    LuaFluidEnergySourcePrototype = {
      emissions  = {readOnly = true},
      render_no_network_icon  = {readOnly = true},
      render_no_power_icon  = {readOnly = true},
      effectivity  = {readOnly = true},
      burns_fluid  = {readOnly = true},
      scale_fluid_usage  = {readOnly = true},
      fluid_usage_per_tick  = {readOnly = true},
      smoke  = {readOnly = true},
      maximum_temperature  = {readOnly = true},
      fluid_box  = {readOnly = true},
    },
    LuaFluidPrototype = {
      name = {readOnly = true},
      localised_name = {readOnly = true},
      localised_description = {readOnly = true},
      default_temperature = {readOnly = true},
      max_temperature = {readOnly = true},
      heat_capacity = {readOnly = true},
      order = {readOnly = true},
      group = {readOnly = true},
      subgroup = {readOnly = true},
      base_color = {readOnly = true},
      flow_color = {readOnly = true},
      gas_temperature = {readOnly = true},
      emissions_multiplier = {readOnly = true},
      fuel_value = {readOnly = true},
      hidden = {readOnly = true},
    },
    LuaForce = {
      name = {readOnly = true},
      technologies = {readOnly = true},
      recipes = {readOnly = true},
      manual_mining_speed_modifier = {},
      manual_crafting_speed_modifier = {},
      laboratory_speed_modifier = {},
      laboratory_productivity_bonus = {},
      worker_robots_speed_modifier = {},
      worker_robots_battery_modifier = {},
      worker_robots_storage_bonus = {},
      current_research = {readOnly = true},
      research_progress = {},
      previous_research = {},
      inserter_stack_size_bonus = {},
      stack_inserter_capacity_bonus = {},
      character_trash_slot_count = {},
      maximum_following_robot_count = {},
      following_robots_lifetime_modifier = {},
      ghost_time_to_live = {},
      players = {readOnly = true},
      ai_controllable = {},
      logistic_networks = {readOnly = true},
      item_production_statistics = {readOnly = true},
      fluid_production_statistics = {readOnly = true},
      kill_count_statistics = {readOnly = true},
      entity_build_count_statistics = {readOnly = true},
      character_running_speed_modifier = {},
      artillery_range_modifier = {},
      character_build_distance_bonus = {},
      character_item_drop_distance_bonus = {},
      character_reach_distance_bonus = {},
      character_resource_reach_distance_bonus = {},
      character_item_pickup_distance_bonus = {},
      character_loot_pickup_distance_bonus = {},
      character_inventory_slots_bonus = {},
      deconstruction_time_to_live = {},
      character_health_bonus = {},
      max_successful_attempts_per_tick_per_construction_queue = {},
      max_failed_attempts_per_tick_per_construction_queue = {},
      zoom_to_world_enabled = {},
      zoom_to_world_ghost_building_enabled = {},
      zoom_to_world_blueprint_enabled = {},
      zoom_to_world_deconstruction_planner_enabled = {},
      zoom_to_world_selection_tool_enabled = {},
      character_logistic_requests = {},
      rockets_launched = {},
      items_launched = {readOnly = true},
      connected_players = {readOnly = true, countLine = true},
      mining_drill_productivity_bonus = {},
      train_braking_force_bonus = {},
      evolution_factor = {},
      evolution_factor_by_pollution = {},
      evolution_factor_by_time = {},
      evolution_factor_by_killing_spawners = {},
      friendly_fire = {},
      share_chart = {},
      research_queue_enabled = {},
      index = {readOnly = true},
      research_queue = {},
      research_enabled = {readOnly = true},
    },
    LuaFuelCategoryPrototype = {
      name = {readOnly = true},
      order = {readOnly = true},
      localised_name = {readOnly = true},
      localised_description = {readOnly = true},
    },
    LuaGameScript = {
      players = {readOnly = true},
      map_settings = {readOnly = true},
      difficulty_settings = {readOnly = true},
      difficulty = {readOnly = true, enum = invert(defines.difficulty,"defines.difficulty.")},
      forces = {readOnly = true},
      entity_prototypes = {readOnly = true},
      item_prototypes = {readOnly = true},
      fluid_prototypes = {readOnly = true},
      tile_prototypes = {readOnly = true},
      equipment_prototypes = {readOnly = true},
      damage_prototypes = {readOnly = true},
      virtual_signal_prototypes = {readOnly = true},
      equipment_grid_prototypes = {readOnly = true},
      recipe_prototypes = {readOnly = true},
      technology_prototypes = {readOnly = true},
      decorative_prototypes = {readOnly = true},
      particle_prototypes = {readOnly = true},
      autoplace_control_prototypes = {readOnly = true},
      noise_layer_prototypes = {readOnly = true},
      mod_setting_prototypes = {readOnly = true},
      custom_input_prototypes = {readOnly = true},
      ammo_category_prototypes = {readOnly = true},
      named_noise_expressions = {readOnly = true},
      item_subgroup_prototypes = {readOnly = true},
      item_group_prototypes = {readOnly = true},
      fuel_category_prototypes = {readOnly = true},
      resource_category_prototypes = {readOnly = true},
      achievement_prototypes = {readOnly = true},
      module_category_prototypes = {readOnly = true},
      equipment_category_prototypes = {readOnly = true},
      trivial_smoke_prototypes = {readOnly = true},
      shortcut_prototypes = {readOnly = true},
      recipe_category_prototypes = {readOnly = true},
      map_gen_presets = {readOnly = true},
      styles = {readOnly = true},
      tick = {readOnly = true},
      ticks_played = {readOnly = true},
      tick_paused  = {},
      ticks_to_run  = {},
      finished = {readOnly = true},
      speed = {},
      surfaces = {readOnly = true},
      active_mods = {readOnly = true},
      connected_players = {readOnly = true, countLine = true},
      permissions = {readOnly = true},
      backer_names = {readOnly = true},
      default_map_gen_settings = {readOnly = true},
      enemy_has_vision_on_land_mines = {},
      autosave_enabled = {},
      draw_resource_selection = {},
      pollution_statistics = {readOnly = true},
      max_force_distraction_distance = {readOnly = true},
      max_force_distraction_chunk_distance = {readOnly = true},
      max_electric_pole_supply_area_distance = {readOnly = true},
      max_electric_pole_connection_distance = {readOnly = true},
      max_beacon_supply_area_distance = {readOnly = true},
      max_gate_activation_distance = {readOnly = true},
      max_inserter_reach_distance = {readOnly = true},
      max_pipe_to_ground_distance = {readOnly = true},
      max_underground_belt_distance = {readOnly = true},
    },
    LuaGameViewSettings = {
      show_controller_gui = {},
      show_minimap = {},
      show_research_info = {},
      show_entity_info = {},
      show_alert_gui = {},
      update_entity_selection = {},
      show_rail_block_visualisation = {},
      show_side_menu = {},
      show_map_view_options = {},
      show_quickbar = {},
      show_shortcut_bar = {},
    },
    LuaGenericOnOffControlBehavior = {
      type = {readOnly = true, enum = invert(defines.control_behavior.type,"defines.control_behavior.type.")},
      entity = {readOnly = true},
      disabled = {readOnly = true},
      circuit_condition = {},
      logistic_condition = {},
      connect_to_logistic_network = {},
    },
    LuaGroup = {
      name = {readOnly = true},
      localised_name = {readOnly = true},
      type = {readOnly = true},
      group = {readOnly = true},
      subgroups = {readOnly = true},
      order_in_recipe = {readOnly = true},
      order = {readOnly = true},
    },
    LuaGui = {
      player = {readOnly = true},
      children = {readOnly = true},
      top = {readOnly = true},
      left = {readOnly = true},
      center = {readOnly = true},
      goal = {readOnly = true},
      screen = {readOnly = true},
      relative = {readOnly = true},
    },
    LuaGuiElement = {
      index = {readOnly = true},
      gui = {readOnly = true},
      parent = {readOnly = true},
      name = {},
      caption = {},
      value = {},
      direction = {readOnly = true},
      style = {},
      visible = {},
      text = {},
      children_names = {readOnly = true},
      state = {},
      player_index = {readOnly = true},
      sprite = {},
      resize_to_sprite = {},
      hovered_sprite = {},
      clicked_sprite = {},
      tooltip = {},
      horizontal_scroll_policy = {},
      vertical_scroll_policy = {},
      type = {readOnly = true},
      children = {readOnly = true},
      items = {},
      selected_index = {},
      number = {},
      show_percent_for_small_numbers = {},
      location = {},
      auto_center = {},
      badge_text = {},
      position = {},
      surface_index = {},
      zoom = {},
      minimap_player_index = {},
      force = {},
      elem_type = {readOnly = true},
      elem_value = {},
      elem_filters = {},
      selectable = {},
      word_wrap = {},
      read_only = {},
      enabled = {},
      ignored_by_interaction = {},
      locked = {},
      draw_vertical_lines = {},
      draw_horizontal_lines = {},
      draw_horizontal_line_after_headers = {},
      column_count = {readOnly = true},
      vertical_centering = {},
      slider_value = {},
      mouse_button_filter = {},
      numeric = {},
      allow_decimal = {},
      allow_negative = {},
      is_password = {},
      lose_focus_on_confirm = {},
      clear_and_focus_on_right_click = {},
      drag_target = {},
      selected_tab_index = {},
      tabs = {readOnly = true},
      entity = {},
      anchor = {},
      tags = {},
      switch_state = {},
      allow_none_state = {},
      left_label_caption = {},
      left_label_tooltip = {},
      right_label_caption = {},
      right_label_tooltip = {},
    },
    LuaInserterControlBehavior = {
      type = {readOnly = true, enum = invert(defines.control_behavior.type,"defines.control_behavior.type.")},
      entity = {readOnly = true},
      disabled = {readOnly = true},
      circuit_condition = {},
      logistic_condition = {},
      connect_to_logistic_network = {},
      circuit_read_hand_contents = {},
      circuit_mode_of_operation = {enum = invert(defines.control_behavior.inserter.circuit_mode_of_operation,"defines.control_behavior.inserter.circuit_mode_of_operation.")},
      circuit_hand_read_mode = {enum = invert(defines.control_behavior.inserter.hand_read_mode,"defines.control_behavior.inserter.hand_read_mode.")},
      circuit_set_stack_size = {},
      circuit_stack_control_signal = {},
    },
    LuaHeatEnergySourcePrototype = {
      emissions = {readOnly = true},
      render_no_network_icon = {readOnly = true},
      render_no_power_icon = {readOnly = true},
      max_temperature = {readOnly = true},
      default_temperature = {readOnly = true},
      specific_heat = {readOnly = true},
      max_transfer = {readOnly = true},
      min_temperature_gradient = {readOnly = true},
      min_working_temperature = {readOnly = true},
      minimum_glow_temperature = {readOnly = true},
      connections = {readOnly = true},
    },
    LuaInventory = {
      index = {readOnly = true, enum =(function()
        local burner = {
          [defines.inventory.fuel] = "defines.inventory.fuel",
          [defines.inventory.burnt_result] = "defines.inventory.burnt_result",
        }
        local function with(super,t) return setmetatable(t,{__index = super}) end

        local chest = {
          [defines.inventory.chest] = "defines.inventory.chest",
        }

        local assembler = with(burner,invert(defines.inventory,"defines.inventory.",function(k,v) return not not string.match(k,"^assembling_machine_") end))

        local character = invert(defines.inventory,"defines.inventory.",function(k,v) return (not not string.match(k,"^character_")) and k ~= "character_corpse" end)
        local robot = invert(defines.inventory,"defines.inventory.",function(k,v) return (not not string.match(k,"^robot_")) end)

        local invname = {
          burner = burner,
          item = invert(defines.inventory,"defines.inventory.",function(k,v) return not not string.match(k,"^item_") end),
          player = {
            [defines.controllers.character] = character,
            [defines.controllers.god] =
              invert(defines.inventory,"defines.inventory.",function(k,v) return not not string.match(k,"^god_") end),
            [defines.controllers.editor] =
              invert(defines.inventory,"defines.inventory.",function(k,v) return not not string.match(k,"^editor_") end),
          },
          entity = {
            ["container"]=chest,
            ["logistic-container"]=chest,
            ["cargo-wagon"]={ [defines.inventory.cargo_wagon] = "defines.inventory.cargo_wagon" },
            ["rocket-silo-rocket"]={ [defines.inventory.cargo_wagon] = "defines.inventory.rocket" },

            ["construction-robot"]=robot,
            ["logistic-robot"]=robot,

            ["ammo-turret"]=invert(defines.inventory,"defines.inventory.",function(k,v) return not not string.match(k,"^turret_") end),
            ["artillery-turret"]=invert(defines.inventory,"defines.inventory.",function(k,v) return not not string.match(k,"^artillery_turret_") end),
            ["artillery-wagon"]=invert(defines.inventory,"defines.inventory.",function(k,v) return not not string.match(k,"^artillery_turret_") end),
            ["roboport"]=invert(defines.inventory,"defines.inventory.",function(k,v) return not not string.match(k,"^roboport_") end),
            ["beacon"]=invert(defines.inventory,"defines.inventory.",function(k,v) return not not string.match(k,"^beacon_") end),
            ["character-corpse"]=invert(defines.inventory,"defines.inventory.",function(k,v) return not not string.match(k,"^character_corpse_") end),

            ["furnace"]=with(burner,invert(defines.inventory,"defines.inventory.",function(k,v) return not not string.match(k,"^furnace_") end)),
            ["assembling-machine"]=assembler,
            ["mining-drill"]=with(burner,invert(defines.inventory,"defines.inventory.",function(k,v) return not not string.match(k,"^mining_drill_") end)),
            ["lab"]=with(burner,invert(defines.inventory,"defines.inventory.",function(k,v) return not not string.match(k,"^lab_") end)),
            ["car"]=with(burner,invert(defines.inventory,"defines.inventory.",function(k,v) return not not string.match(k,"^car_") end)),
            ["spider-vehicle"]=with(burner,invert(defines.inventory,"defines.inventory.",function(k,v) return not not string.match(k,"^spider_") end)),
            ["rocket-silo"]=with(assembler,invert(defines.inventory,"defines.inventory.",function(k,v) return not not string.match(k,"^rocket_silo_") end)),

          },
        }
        return function(inv,index)
          local owner = inv.player_owner
          if owner then
            -- check if player is character/god/editor
            local names = invname.player[owner.controller_type]
            if names then
              return names[index]
            end
            return
          end
          owner = inv.equipment_owner
          if owner then
            -- burner inside equipment
            return invname.burner[index]
          end
          owner = inv.entity_owner
          if owner then
            -- check entity type
            local names = invname.entity[owner.type]
            if names then
              return names[index]
            end
            return
          end
          owner = inv.mod_owner
          if owner then
            return nil
          end
          local names = invname.item
          return names[index]
        end
      end)()},
      entity_owner = {readOnly = true},
      player_owner = {readOnly = true},
      equipment_owner = {readOnly = true},
      mod_owner = {readOnly = true},
      ["[]"] = {readOnly = true, thisAsTable = true, iterMode = "count" }
    },
    LuaItemPrototype = {
      type = {readOnly = true},
      name = {readOnly = true},
      localised_name = {readOnly = true},
      localised_description = {readOnly = true},
      order = {readOnly = true},
      place_result = {readOnly = true},
      place_as_equipment_result = {readOnly = true},
      place_as_tile_result = {readOnly = true},
      stackable = {readOnly = true},
      default_request_amount = {readOnly = true},
      stack_size = {readOnly = true},
      wire_count = {readOnly = true},
      fuel_category = {readOnly = true},
      burnt_result = {readOnly = true},
      fuel_value = {readOnly = true},
      fuel_acceleration_multiplier = {readOnly = true},
      fuel_top_speed_multiplier = {readOnly = true},
      fuel_emissions_multiplier = {readOnly = true},
      subgroup = {readOnly = true},
      group = {readOnly = true},
      flags = {readOnly = true},
      rocket_launch_products = {readOnly = true},
      can_be_mod_opened = {readOnly = true},
      magazine_size = {readOnly = true},
      reload_time = {readOnly = true},
      equipment_grid = {readOnly = true},
      resistances = {readOnly = true},
      inventory_size_bonus = {readOnly = true},
      capsule_action = {readOnly = true},
      attack_parameters = {readOnly = true},
      inventory_size = {readOnly = true},
      item_filters = {readOnly = true},
      item_group_filters = {readOnly = true},
      item_subgroup_filters = {readOnly = true},
      filter_mode = {readOnly = true},
      insertion_priority_mode = {readOnly = true},
      localised_filter_message = {readOnly = true},
      extend_inventory_by_default = {readOnly = true},
      default_label_color = {readOnly = true},
      draw_label_for_cursor_render = {readOnly = true},
      speed = {readOnly = true},
      module_effects = {readOnly = true},
      category = {readOnly = true},
      tier = {readOnly = true},
      limitations = {readOnly = true},
      limitation_message_key = {readOnly = true},
      straight_rail = {readOnly = true},
      curved_rail = {readOnly = true},
      repair_result = {readOnly = true},
      selection_border_color = {readOnly = true},
      alt_selection_border_color = {readOnly = true},
      selection_mode_flags = {readOnly = true},
      alt_selection_mode_flags = {readOnly = true},
      selection_cursor_box_type = {readOnly = true},
      alt_selection_cursor_box_type = {readOnly = true},
      always_include_tiles = {readOnly = true},
      entity_filter_mode = {readOnly = true},
      alt_entity_filter_mode = {readOnly = true},
      tile_filter_mode = {readOnly = true},
      alt_tile_filter_mode = {readOnly = true},
      entity_filters = {readOnly = true},
      alt_entity_filters = {readOnly = true},
      entity_type_filters = {readOnly = true},
      alt_entity_type_filters = {readOnly = true},
      tile_filters = {readOnly = true},
      alt_tile_filters = {readOnly = true},
      entity_filter_slots = {readOnly = true},
      tile_filter_slots = {readOnly = true},
      durability_description_key = {readOnly = true},
      durability = {readOnly = true},
      infinite = {readOnly = true},
      mapper_count = {readOnly = true},
    },
    LuaItemStack = {
      prototype = {readOnly = true},
      name = {readOnly = true},
      type = {readOnly = true},
      count = {},
      grid = {readOnly = true},
      health = {},
      durability = {},
      ammo = {},
      blueprint_icons = {},
      blueprint_snap_to_grid = {},
      blueprint_position_relative_to_grid = {},
      blueprint_absolute_snapping = {},
      label = {},
      label_color = {},
      allow_manual_label_change = {},
      cost_to_build = {readOnly = true},
      extends_inventory = {},
      prioritize_insertion_mode = {},
      default_icons = {readOnly = true},
      tags = {},
      custom_description = {},
      entity_filters = {},
      tile_filters = {},
      entity_filter_mode = {enum = invert(defines.deconstruction_item.entity_filter_mode,"defines.deconstruction_item.entity_filter_mode.")},
      tile_filter_mode = {enum = invert(defines.deconstruction_item.tile_filter_mode,"defines.deconstruction_item.tile_filter_mode.")},
      tile_selection_mode = {enum = invert(defines.deconstruction_item.tile_selection_mode,"defines.deconstruction_item.tile_selection_mode.")},
      trees_and_rocks_only = {},
      entity_filter_count = {readOnly = true},
      tile_filter_count = {readOnly = true},
      active_index = {},
      item_number = {readOnly = true},
      connected_entity = {},
      is_blueprint = {readOnly = true},
      is_blueprint_book = {readOnly = true},
      is_module = {readOnly = true},
      is_tool = {readOnly = true},
      is_mining_tool = {readOnly = true},
      is_armor = {readOnly = true},
      is_repair_tool = {readOnly = true},
      is_item_with_label = {readOnly = true},
      is_item_with_inventory = {readOnly = true},
      is_item_with_entity_data = {readOnly = true},
      is_selection_tool = {readOnly = true},
      is_item_with_tags = {readOnly = true},
      is_deconstruction_item = {readOnly = true},
      is_upgrade_item = {readOnly = true},
    },
    LuaLampControlBehavior = {
      type = {readOnly = true, enum = invert(defines.control_behavior.type,"defines.control_behavior.type.")},
      entity = {readOnly = true},
      disabled = {readOnly = true},
      circuit_condition = {},
      logistic_condition = {},
      connect_to_logistic_network = {},
      use_colors = {},
      color = {readOnly = true},
    },
    LuaLogisticCell = {
      logistic_radius = {readOnly = true},
      logistics_connection_distance = {readOnly = true},
      construction_radius = {readOnly = true},
      stationed_logistic_robot_count = {readOnly = true},
      stationed_construction_robot_count = {readOnly = true},
      mobile = {readOnly = true},
      transmitting = {readOnly = true},
      charge_approach_distance = {readOnly = true},
      charging_robot_count = {readOnly = true},
      to_charge_robot_count = {readOnly = true},
      owner = {readOnly = true},
      logistic_network = {readOnly = true},
      neighbours = {readOnly = true},
      charging_robots = {readOnly = true},
      to_charge_robots = {readOnly = true},
    },
    LuaLogisticContainerControlBehavior = {
      type = {readOnly = true, enum = invert(defines.control_behavior.type,"defines.control_behavior.type.")},
      entity = {readOnly = true},
      circuit_mode_of_operation = {enum = invert(defines.control_behavior.logistic_container.circuit_mode_of_operation,"defines.control_behavior.logistic_container.circuit_mode_of_operation.")},
    },
    LuaLogisticNetwork = {
      force = {readOnly = true},
      available_logistic_robots = {readOnly = true},
      all_logistic_robots = {readOnly = true},
      available_construction_robots = {readOnly = true},
      all_construction_robots = {readOnly = true},
      robot_limit = {readOnly = true},
      cells = {readOnly = true},
      providers = {readOnly = true},
      empty_providers = {readOnly = true},
      requesters = {readOnly = true},
      storages = {readOnly = true},
      logistic_members = {readOnly = true},
      provider_points = {readOnly = true},
      passive_provider_points = {readOnly = true},
      active_provider_points = {readOnly = true},
      empty_provider_points = {readOnly = true},
      requester_points = {readOnly = true},
      storage_points = {readOnly = true},
      robots = {readOnly = true},
      construction_robots = {readOnly = true},
      logistic_robots = {readOnly = true},
    },
    LuaLogisticPoint = {
      owner = {readOnly = true},
      logistic_network = {readOnly = true},
      logistic_member_index = {readOnly = true},
      filters = {readOnly = true},
      mode = {readOnly = true, enum = invert(defines.logistic_mode,"defines.logistic_mode.")},
      force = {readOnly = true},
      targeted_items_pickup = {readOnly = true},
      targeted_items_deliver = {readOnly = true},
      exact = {readOnly = true},
    },
    LuaMapSettings = {
      pollution = {},
      enemy_evolution = {},
      enemy_expansion = {},
      unit_group = {},
      steering = {},
      path_finder = {},
      max_failed_behavior_count = {},
    },

    ["LuaMapSettings.pollution"] = {
      enabled = {},
      diffusion_ratio = {},
      min_to_diffuse = {},
      ageing = {},
      expected_max_per_chunk = {},
      min_to_show_per_chunk = {},
      min_pollution_to_damage_trees = {},
      pollution_with_max_forest_damage = {},
      pollution_per_tree_damage = {},
      pollution_restored_per_tree_damage = {},
      max_pollution_to_restore_trees = {},
      enemy_attack_pollution_consumption_modifier = {},
    },
    ["LuaMapSettings.enemy_evolution"] = {
      enabled = {},
      time_factor = {},
      destroy_factor = {},
      pollution_factor = {},
    },
    ["LuaMapSettings.enemy_expansion"] = {
      enabled = {},
      max_expansion_distance = {},
      friendly_base_influence_radius = {},
      enemy_building_influence_radius = {},
      building_coefficient = {},
      other_base_coefficient = {},
      neighbouring_chunk_coefficient = {},
      neighbouring_base_chunk_coefficient = {};
      max_colliding_tiles_coefficient = {},
      settler_group_min_size = {},
      settler_group_max_size = {},
      min_expansion_cooldown = {},
      max_expansion_cooldown = {},
    },
    ["LuaMapSettings.unit_group"] = {
      min_group_gathering_time = {},
      max_group_gathering_time = {},
      max_wait_time_for_late_members = {},
      max_group_radius = {},
      min_group_radius = {},
      max_member_speedup_when_behind = {},
      max_member_slowdown_when_ahead = {},
      max_group_slowdown_factor = {},
      max_group_member_fallback_factor = {},
      member_disown_distance = {},
      tick_tolerance_when_member_arrives = {},
      max_gathering_unit_groups = {},
      max_unit_group_size = {},
    },
    ["LuaMapSettings.steering"] = {
      default = {}, moving = {},
    },
    ["LuaMapSettings.steering.default"] = {
      radius = {},
      separation_force = {},
      separation_factor = {},
      force_unit_fuzzy_goto_behavior = {},
    },
    ["LuaMapSettings.steering.moving"] = {
      radius = {},
      separation_force = {},
      separation_factor = {},
      force_unit_fuzzy_goto_behavior = {},
    },
    ["LuaMapSettings.path_finder"] = {
      fwd2bwd_ratio = {},
      goal_pressure_ratio = {},
      max_steps_worked_per_tick = {},
      max_work_done_per_tick = {},
      use_path_cache = {},
      short_cache_size = {},
      long_cache_size = {},
      short_cache_min_cacheable_distance = {},
      short_cache_min_algo_steps_to_cache = {},
      long_cache_min_cacheable_distance = {},
      cache_max_connect_to_cache_steps_multiplier = {},
      cache_accept_path_start_distance_ratio = {},
      cache_accept_path_end_distance_ratio = {},
      negative_cache_accept_path_start_distance_ratio = {},
      negative_cache_accept_path_end_distance_ratio = {},
      cache_path_start_distance_rating_multiplier = {},
      cache_path_end_distance_rating_multiplier = {},
      stale_enemy_with_same_destination_collision_penalty = {},
      ignore_moving_enemy_collision_distance = {},
      enemy_with_different_destination_collision_penalty = {},
      general_entity_collision_penalty = {},
      general_entity_subsequent_collision_penalty = {},
      extended_collision_penalty = {},
      max_clients_to_accept_any_new_request = {},
      max_clients_to_accept_short_new_request = {},
      direct_distance_to_consider_short_request = {},
      short_request_max_steps = {},
      short_request_ratio = {},
      min_steps_to_check_path_find_termination = {},
      start_to_goal_cost_multiplier_to_terminate_path_find = {},
    },

    LuaMiningDrillControlBehavior = {
      type = {readOnly = true, enum = invert(defines.control_behavior.type,"defines.control_behavior.type.")},
      entity = {readOnly = true},
      disabled = {readOnly = true},
      circuit_condition = {},
      logistic_condition = {},
      connect_to_logistic_network = {},
      circuit_enable_disable = {},
      circuit_read_resources = {},
      resource_read_mode = {enum = invert(defines.control_behavior.mining_drill.resource_read_mode,"defines.control_behavior.mining_drill.resource_read_mode.")},
      resource_read_targets = {readOnly = true},
    },
    LuaModSettingPrototype = {
      name = {readOnly = true},
      order = {readOnly = true},
      localised_name = {readOnly = true},
      localised_description = {readOnly = true},
      mod = {readOnly = true},
      setting_type = {readOnly = true},
      default_value = {readOnly = true},
      minimum_value = {readOnly = true},
      maximum_value = {readOnly = true},
      allowed_values = {readOnly = true},
      allow_blank = {readOnly = true},
      auto_trim = {readOnly = true},
      hidden = {readOnly = true},
    },
    LuaModuleCategoryPrototype = {
      name = {readOnly = true},
      order = {readOnly = true},
      localised_name = {readOnly = true},
      localised_description = {readOnly = true},
    },
    LuaNamedNoiseExpression = {
      name = {readOnly = true},
      order = {readOnly = true},
      localised_name = {readOnly = true},
      localised_description = {readOnly = true},
      intended_property = {readOnly = true},
      expression = {readOnly = true},
    },
    LuaNoiseLayerPrototype = {
      name = {readOnly = true},
      order = {readOnly = true},
      localised_name = {readOnly = true},
      localised_description = {readOnly = true},
    },
    LuaParticlePrototype = {
      name = {readOnly = true},
      order = {readOnly = true},
      localised_name = {readOnly = true},
      localised_description = {readOnly = true},
      regular_trigger_effect = {readOnly = true},
      ended_in_water_trigger_effect = {readOnly = true},
      render_layer = {readOnly = true},
      render_layer_when_on_ground = {readOnly = true},
      life_time = {readOnly = true},
      regular_trigger_effect_frequency = {readOnly = true},
      movement_modifier_when_on_ground = {readOnly = true},
      movement_modifier = {readOnly = true},
      mining_particle_frame_speed = {readOnly = true},
    },
    LuaPermissionGroup = {
      name = {},
      players = {readOnly = true},
      group_id = {readOnly = true},
    },
    LuaPermissionGroups = {
      groups = {readOnly = true},
    },
    LuaPlayer = {
      surface = {readOnly = true},
      position = {readOnly = true},
      vehicle = {readOnly = true},
      force = {},
      selected = {},
      opened = {},
      crafting_queue_size = {readOnly = true},
      crafting_queue_progress = {readOnly = true},
      walking_state = {},
      riding_state = {},
      mining_state = {},
      shooting_state = {},
      picking_state = {},
      repair_state = {},
      cursor_stack = {readOnly = true},
      cursor_ghost = {},
      driving = {},
      crafting_queue = {readOnly = true},
      following_robots = {readOnly = true},
      cheat_mode = {},
      character_crafting_speed_modifier = {},
      character_mining_speed_modifier = {},
      character_additional_mining_categories = {},
      character_running_speed_modifier = {},
      character_build_distance_bonus = {},
      character_item_drop_distance_bonus = {},
      character_reach_distance_bonus = {},
      character_resource_reach_distance_bonus = {},
      character_item_pickup_distance_bonus = {},
      character_loot_pickup_distance_bonus = {},
      character_inventory_slots_bonus = {},
      character_trash_slot_count_bonus = {},
      character_maximum_following_robot_count_bonus = {},
      character_health_bonus = {},
      character_personal_logistic_requests_enabled = {},
      vehicle_logistic_requests_enabled = {},
      opened_gui_type = {readOnly = true, enum = invert(defines.gui_type,"defines.gui_type.")},
      build_distance = {readOnly = true},
      drop_item_distance = {readOnly = true},
      reach_distance = {readOnly = true},
      item_pickup_distance = {readOnly = true},
      loot_pickup_distance = {readOnly = true},
      resource_reach_distance = {readOnly = true},
      in_combat = {readOnly = true},
      character_running_speed = {readOnly = true},
      character_mining_progress = {readOnly = true},
      character = {},
      cutscene_character = {readOnly = true},
      index = {readOnly = true},
      gui = {readOnly = true},
      opened_self = {readOnly = true},
      controller_type = {readOnly = true, enum = invert(defines.controllers,"defines.controllers.")},
      stashed_controller_type = {readOnly = true, enum = invert(defines.controllers,"defines.controllers.")},
      game_view_settings = {},
      minimap_enabled = {},
      color = {},
      chat_color = {},
      name = {readOnly = true},
      tag = {},
      connected = {readOnly = true},
      admin = {},
      entity_copy_source = {readOnly = true},
      afk_time = {readOnly = true},
      online_time = {readOnly = true},
      last_online = {readOnly = true},
      permission_group = {},
      mod_settings = {readOnly = true},
      ticks_to_respawn = {},
      display_resolution = {readOnly = true},
      display_scale = {readOnly = true},
      blueprint_to_setup = {readOnly = true},
      render_mode = {readOnly = true, enum = invert(defines.render_mode,"defines.render_mode.")},
      spectator = {},
      remove_unfiltered_items = {},
      infinity_inventory_filters = {},
      auto_sort_main_inventory = {readOnly = true},
      hand_location = {},
    },
    LuaProfiler = {
      ["<translated>"] = {thisTranslated = true},
    },
    LuaProgrammableSpeakerControlBehavior = {
      type = {readOnly = true, enum = invert(defines.control_behavior.type,"defines.control_behavior.type.")},
      entity = {readOnly = true},
      circuit_parameters = {},
      circuit_condition = {},
    },
    LuaRailChainSignalControlBehavior = {
      type = {readOnly = true, enum = invert(defines.control_behavior.type,"defines.control_behavior.type.")},
      entity = {readOnly = true},
      red_signal = {},
      orange_signal = {},
      green_signal = {},
      blue_signal = {},
    },
    LuaRailPath = {
      size = {readOnly = true},
      current = {readOnly = true},
      total_distance = {readOnly = true},
      travelled_distance = {readOnly = true},
      rails = {readOnly = true},
    },
    LuaRailSignalControlBehavior = {
      type = {readOnly = true, enum = invert(defines.control_behavior.type,"defines.control_behavior.type.")},
      entity = {readOnly = true},
      red_signal = {},
      orange_signal = {},
      green_signal = {},
      close_signal = {},
      read_signal = {},
      circuit_condition = {},
    },
    LuaRecipe = {
      name = {readOnly = true},
      localised_name = {readOnly = true},
      localised_description = {readOnly = true},
      prototype = {readOnly = true},
      enabled = {},
      category = {readOnly = true},
      ingredients = {readOnly = true},
      products = {readOnly = true},
      hidden = {readOnly = true},
      hidden_from_flow_stats = {},
      energy = {readOnly = true},
      order = {readOnly = true},
      group = {readOnly = true},
      subgroup = {readOnly = true},
      force = {readOnly = true},
    },
    LuaRecipeCategoryPrototype = {
      name = {readOnly = true},
      order = {readOnly = true},
      localised_name = {readOnly = true},
      localised_description = {readOnly = true},
    },
    LuaRecipePrototype = {
      enabled = {readOnly = true},
      name = {readOnly = true},
      localised_name = {readOnly = true},
      localised_description = {readOnly = true},
      category = {readOnly = true},
      ingredients = {readOnly = true},
      products = {readOnly = true},
      main_product = {readOnly = true},
      hidden = {readOnly = true},
      hidden_from_flow_stats = {readOnly = true},
      hidden_from_player_crafting = {readOnly = true},
      always_show_made_in = {readOnly = true},
      energy = {readOnly = true},
      order = {readOnly = true},
      group = {readOnly = true},
      subgroup = {readOnly = true},
      request_paste_multiplier = {readOnly = true},
      overload_multiplier = {readOnly = true},
      allow_as_intermediate = {readOnly = true},
      allow_intermediates = {readOnly = true},
      show_amount_in_title = {readOnly = true},
      always_show_products = {readOnly = true},
      emissions_multiplier = {readOnly = true},
      allow_decomposition = {readOnly = true},
      unlock_results = {readOnly = true},
    },
    LuaRemote = {
      interfaces = {readOnly = true},
    },
    LuaResourceCategoryPrototype = {
      name = {readOnly = true},
      order = {readOnly = true},
      localised_name = {readOnly = true},
      localised_description = {readOnly = true},
    },
    LuaRoboportControlBehavior = {
      type = {readOnly = true, enum = invert(defines.control_behavior.type,"defines.control_behavior.type.")},
      entity = {readOnly = true},
      read_logistics = {},
      read_robot_stats = {},
      available_logistic_output_signal = {},
      total_logistic_output_signal = {},
      available_construction_output_signal = {},
      total_construction_output_signal = {},
    },
    LuaSettings = {
      startup = {readOnly = true},
      global = {readOnly = true},
      player = {readOnly = true},
    },
    LuaShortcutPrototype = {
      name = {readOnly = true},
      order = {readOnly = true},
      localised_name = {readOnly = true},
      localised_description = {readOnly = true},
      action = {readOnly = true},
      item_to_spawn = {readOnly = true},
      technology_to_unlock = {readOnly = true},
      toggleable = {readOnly = true},
      associated_control_input = {readOnly = true},
    },
    LuaStorageTankControlBehavior = {
      type = {readOnly = true, enum = invert(defines.control_behavior.type,"defines.control_behavior.type.")},
      entity = {readOnly = true},
    },
    LuaStyle = {
      gui = {readOnly = true},
      name = {readOnly = true},
      minimal_width = {},
      maximal_width = {},
      minimal_height = {},
      maximal_height = {},
      natural_width = {},
      natural_height = {},
      top_padding = {},
      right_padding = {},
      bottom_padding = {},
      left_padding = {},
      top_margin = {},
      right_margin = {},
      bottom_margin = {},
      left_margin = {},
      horizontal_align = {},
      vertical_align = {},
      font_color = {},
      font = {},
      top_cell_padding = {},
      right_cell_padding = {},
      bottom_cell_padding = {},
      left_cell_padding = {},
      horizontally_stretchable = {},
      vertically_stretchable = {},
      horizontally_squashable = {},
      vertically_squashable = {},
      rich_text_setting = {enum = invert(defines.rich_text_setting,"defines.rich_text_setting.")},
      hovered_font_color = {},
      clicked_font_color = {},
      disabled_font_color = {},
      pie_progress_color = {},
      clicked_vertical_offset = {},
      selected_font_color = {},
      selected_hovered_font_color = {},
      selected_clicked_font_color = {},
      strikethrough_color = {},
      horizontal_spacing = {},
      vertical_spacing = {},
      use_header_filler = {},
      color = {},
      column_alignments = {readOnly = true},
      single_line = {},
      extra_top_padding_when_activated = {},
      extra_bottom_padding_when_activated = {},
      extra_left_padding_when_activated = {},
      extra_right_padding_when_activated = {},
      extra_top_margin_when_activated = {},
      extra_bottom_margin_when_activated = {},
      extra_left_margin_when_activated = {},
      extra_right_margin_when_activated = {},
      stretch_image_to_widget_size = {},
      badge_font = {},
      badge_horizontal_spacing = {},
      default_badge_font_color = {},
      selected_badge_font_color = {},
      disabled_badge_font_color = {},
    },
    LuaSurface = {
      name = {},
      index = {readOnly = true},
      map_gen_settings = {},
      generate_with_lab_tiles = {},
      always_day = {},
      daytime = {},
      darkness = {readOnly = true},
      wind_speed = {},
      wind_orientation = {},
      wind_orientation_change = {},
      peaceful_mode = {},
      freeze_daytime = {},
      ticks_per_day = {},
      dusk = {},
      dawn = {},
      evening = {},
      morning = {},
      solar_power_multiplier = {},
      min_brightness = {},
      brightness_visual_weights = {},
      show_clouds = {},
    },
    LuaTechnology = {
      force = {readOnly = true},
      name = {readOnly = true},
      localised_name = {readOnly = true},
      localised_description = {readOnly = true},
      prototype = {readOnly = true},
      enabled = {},
      visible_when_disabled = {},
      upgrade = {readOnly = true},
      researched = {},
      prerequisites = {readOnly = true},
      research_unit_ingredients = {readOnly = true},
      effects = {readOnly = true},
      research_unit_count = {readOnly = true},
      research_unit_energy = {readOnly = true},
      order = {readOnly = true},
      level = {},
      research_unit_count_formula = {readOnly = true},
    },
    LuaTechnologyPrototype = {
      name = {readOnly = true},
      localised_name = {readOnly = true},
      localised_description = {readOnly = true},
      enabled = {readOnly = true},
      hidden = {readOnly = true},
      visible_when_disabled = {readOnly = true},
      ignore_tech_cost_multiplier = {readOnly = true},
      upgrade = {readOnly = true},
      prerequisites = {readOnly = true},
      research_unit_ingredients = {readOnly = true},
      effects = {readOnly = true},
      research_unit_count = {readOnly = true},
      research_unit_energy = {readOnly = true},
      order = {readOnly = true},
      level = {readOnly = true},
      max_level = {readOnly = true},
      research_unit_count_formula = {readOnly = true},
    },
    LuaTile = {
      name = {readOnly = true},
      prototype = {readOnly = true},
      position = {readOnly = true},
      hidden_tile = {readOnly = true},
      surface = {readOnly = true},
    },
    LuaTilePrototype = {
      name = {readOnly = true},
      order = {readOnly = true},
      localised_name = {readOnly = true},
      localised_description = {readOnly = true},
      collision_mask = {readOnly = true},
      collision_mask_with_flags = {readOnly = true},
      layer = {readOnly = true},
      autoplace_specification = {readOnly = true},
      walking_speed_modifier = {readOnly = true},
      vehicle_friction_modifier = {readOnly = true},
      map_color = {readOnly = true},
      decorative_removal_probability = {readOnly = true},
      automatic_neighbors = {readOnly = true},
      allowed_neighbors = {readOnly = true},
      needs_correction = {readOnly = true},
      mineable_properties = {readOnly = true},
      next_direction = {readOnly = true},
      items_to_place_this = {readOnly = true},
      can_be_part_of_blueprint = {readOnly = true},
      emissions_per_second = {readOnly = true},
    },
    LuaTrain = {
      manual_mode = {},
      speed = {},
      max_forward_speed = {readOnly = true},
      max_backward_speed = {readOnly = true},
      weight = {readOnly = true},
      carriages = {readOnly = true},
      locomotives = {readOnly = true},
      cargo_wagons = {readOnly = true},
      fluid_wagons = {readOnly = true},
      schedule = {},
      state = {readOnly = true, enum = invert(defines.train_state,"defines.train_state.")},
      front_rail = {readOnly = true},
      back_rail = {readOnly = true},
      rail_direction_from_front_rail = {readOnly = true, enum = invert(defines.rail_direction,"defines.rail_direction.")},
      rail_direction_from_back_rail = {readOnly = true, enum = invert(defines.rail_direction,"defines.rail_direction.")},
      front_stock = {readOnly = true},
      back_stock = {readOnly = true},
      station = {readOnly = true},
      has_path = {readOnly = true},
      path_end_rail = {readOnly = true},
      path_end_stop = {readOnly = true},
      id = {readOnly = true},
      passengers = {readOnly = true},
      riding_state = {readOnly = true},
      killed_players = {readOnly = true},
      kill_count = {readOnly = true},
      path = {readOnly = true},
      signal = {readOnly = true},
    },
    LuaTrainStopControlBehavior = {
      type = {readOnly = true, enum = invert(defines.control_behavior.type,"defines.control_behavior.type.")},
      entity = {readOnly = true},
      disabled = {readOnly = true},
      circuit_condition = {},
      logistic_condition = {},
      connect_to_logistic_network = {},
      send_to_train = {},
      read_from_train = {},
      read_stopped_train = {},
      set_trains_limit = {},
      read_trains_count = {},
      enable_disable = {},
      stopped_train_signal = {},
      trains_count_signal = {},
      trains_limit_signal = {},
    },
    LuaTransportBeltControlBehavior = {
      type = {readOnly = true, enum = invert(defines.control_behavior.type,"defines.control_behavior.type.")},
      entity = {readOnly = true},
      disabled = {readOnly = true},
      circuit_condition = {},
      logistic_condition = {},
      connect_to_logistic_network = {},
      enable_disable = {},
      read_contents = {},
      read_contents_mode = {enum = invert(defines.control_behavior.transport_belt.content_read_mode,"defines.control_behavior.transport_belt.content_read_mode.")},
    },
    LuaTransportLine = {
      owner = {readOnly = true},
      output_lines = {readOnly = true},
      input_lines = {readOnly = true},
      ["[]"] = {readOnly = true, thisAsTable = true, iterMode = "count" }
    },
    LuaTrivialSmokePrototype = {
      name = {readOnly = true},
      order = {readOnly = true},
      localised_name = {readOnly = true},
      localised_description = {readOnly = true},
      color = {readOnly = true},
      start_scale = {readOnly = true},
      end_scale = {readOnly = true},
      movement_slow_down_factor = {readOnly = true},
      duration = {readOnly = true},
      spread_duration = {readOnly = true},
      fade_away_duration = {readOnly = true},
      fade_in_duration = {readOnly = true},
      glow_fade_away_duration = {readOnly = true},
      cyclic = {readOnly = true},
      affected_by_wind = {readOnly = true},
      show_when_smoke_off = {readOnly = true},
      glow_animation = {readOnly = true},
      render_layer = {readOnly = true},
    },
    LuaUnitGroup = {
      members = {readOnly = true},
      position = {readOnly = true},
      state = {readOnly = true, enum = invert(defines.group_state,"defines.group_state.")},
      force = {readOnly = true},
      surface = {readOnly = true},
      group_number = {readOnly = true},
      is_script_driven = {readOnly = true},
      command = {readOnly = true},
      distraction_command = {readOnly = true},
    },
    LuaVirtualSignalPrototype = {
      name = {readOnly = true},
      order = {readOnly = true},
      localised_name = {readOnly = true},
      localised_description = {readOnly = true},
      special = {readOnly = true},
      subgroup = {readOnly = true},
    },
    LuaVoidEnergySourcePrototype = {
      emissions = {readOnly = true},
      render_no_network_icon = {readOnly = true},
      render_no_power_icon = {readOnly = true},
    },
    LuaWallControlBehavior = {
      type = {readOnly = true, enum = invert(defines.control_behavior.type,"defines.control_behavior.type.")},
      entity = {readOnly = true},
      circuit_condition = {},
      open_gate = {},
      read_sensor = {},
      output_signal = {},
    },
  }
}